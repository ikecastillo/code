<?xml version="1.0" encoding="UTF-8" ?><Module><ModulePrefs title="Incident Management : Incident Duration" directory_title="Incident Management : Incident Duration " description="Incident Management : Incident Duration Bar Chart Report. This gadget also allows drill down to see the incidents corresponding to the actual incident count on the report " author="DT" thumbnail="http://goo.gl/LDofI"><Require feature="dynamic-height"/><Require feature="oauthpopup"/><Require feature="setprefs"/><Require feature="settitle"/><Require feature="views"/><Optional feature="atlassian.util"/><Optional feature="gadget-directory"><Param name="categories">JIRA</Param></Optional>
        #oauth
        #supportedLocales("gadget.common,gadget.days.left")
        #supportLocales
    </ModulePrefs><UserPref name="show_date" display_name="Show Dates?" datatype="bool" default_value="true"/><UserPref name="refresh" datatype="hidden" default_value="false"/><UserPref name="isConfigured" datatype="hidden" default_value="false"/><UserPref name="firstTime" datatype="hidden" default_value="true"/><UserPref name="startDate" datatype="hidden"/><UserPref name="endDate" datatype="hidden" default_value="All"/><UserPref name="severity" datatype="hidden" default_value="High"/><UserPref name="solutionGroup" datatype="hidden" default_value="All"/><UserPref name="projectId" datatype="hidden" default_value="ITIM"/><UserPref name="issueTypes" datatype="hidden" default_value="Incident"/><UserPref name="status" datatype="hidden" default_value="All"/><UserPref name="location" datatype="hidden" default_value="All"/><UserPref name="typs" datatype="hidden" default_value="Internal"/><UserPref name="cause" datatype="hidden" default_value=""/><UserPref name="headertxt" datatype="hidden" default_value="Incident Management : Incident Duration"/><Content type="html">
     <![CDATA[	
     
	#requireResource("com.atlassian.jira.gadgets:common")
	#requireResource("com.dt.jira.plugin.dashboard.ITSMDashboard:itsm-gadgets-common-js")
	#requireResource("com.dt.jira.plugin.dashboard.ITSMDashboard:ITSMDashboard-resources")
	#requireResource("com.dt.jira.plugin.dashboard.ITSMDashboard:itsmjqplot")
	
	#includeResources()
		<span id="typeSpan" style = "padding-left: 54;color:#707070;font-size: 15px;">Clients Impacted &nbsp;&nbsp;&nbsp;</span><select id="typeSelect"></select>
	<br/><br/>
	 <span id="solutionSpan"  style="display : none;padding-left: 60;color:#707070;font-size: 15px;">Solution Group &nbsp;&nbsp;&nbsp;&nbsp;</span><select id="solutionSelect"  style="display : none" multiple="multiple"></select>
	 <span id="locationSpan" style = "padding-left: 80;color:#707070;font-size: 15px;">Impacted  &nbsp;&nbsp;&nbsp;&nbsp;</span><select id="locationSelect" multiple="multiple"></select>
	
		<script type="text/javascript">
		GROUP_BY_FIELD = "Defect Cause";
		AJS.$('#typeSelect').hide();
         AJS.$('#typeSpan').hide();
         AJS.$("#locationSpan").hide();
         AJS.$("#locationSelect").hide();
         AJS.$("#solutionSpan").hide();
         AJS.$("#solutionSelect").hide();
		(function () {
			/* (1) Construct and initialise the gadget */
			var gadget = AJS.Gadget({
				baseUrl: "__ATLASSIAN_BASE_URL__", /* (3) Used to make base url available to gadget */
				useOauth: "/rest/gadget/1.0/currentUser",
                config: {
                    descriptor: function(args)
                    {
                        var desc = DTGADGET.ITSMUptimeReportdescriptorSumary(this, args, "__ATLASSIAN_BASE_URL__");	
						
                       	desc.fields.push ({
					    		    userpref: "headertxt",
					    		    label: "Header",
					    		    type: "text",
					    		    value: gadget.getPref("headertxt")
					    		    });
									
                          /*desc.fields.push ({
							id: "cause",
							userpref: "cause",
							label: "Cause",
							type: "multiselect",
							selected: gadget.getPref("cause"),
							options:[
										{  
											label:"Internal",
											value:"Internal"
										},
										{  
											label:"External",
											value:"External"
										},
										{  
											label:"Internal Change Control",
											value:"Internal Change Control"
										},
										{  
											label:"None",
											value:"None"
										}									
									]							
						});*/

						/* Causes are now got dynamically*/
						var getCauses=function() {
							var options=[];
							for (var index in args.causes) {
								options.push({label:args.causes[index].label,value:args.causes[index].value});
							}
							return {
								id: "cause",
								userpref: "cause",
								label: "Cause",
								type: "multiselect",
								selected: gadget.getPref("cause"),
								options:options
							};

						};
						desc.fields.push(getCauses());

						AJS.$("#typeSelect").empty();
                         AJS.$('#typeSelect').show();
                    	 AJS.$('#typeSpan').show();
                        AJS.$(args.types).each(function(){
					    var typeOption = AJS.$("<option/>").attr("value", this.value).text(this.value);						
						
						AJS.$("#typeSelect").append(typeOption);
						
						var projectUserPrefTypeValue = gadget.getPref("typs");
						var pType = projectUserPrefTypeValue.split("|");
							if(AJS.$.inArray(this.value,pType)>-1)
							{
								typeOption.attr({selected: "selected"});
						    } 
						});
						
						AJS.$("#typeSelect").change(function(event)
            		    {	
            		 		var typeValues = AJS.$('#typeSelect').val()
             	  		 	 if(typeValues == "External"){
             	  		 	 AJS.$("#solutionSpan").show();
             	  				AJS.$("#solutionSelect").show();
             	  		 	 	AJS.$("#locationSpan").hide();
             	  				AJS.$("#locationSelect").hide();
             	  				
             	  		 	 }
             	  		 	 else{
             	  		 	 	AJS.$("#locationSpan").show();
             	  				AJS.$("#locationSelect").show();
             	  		 	 	AJS.$("#solutionSpan").hide();
             	  				AJS.$("#solutionSelect").hide();
             	  				 
             	  		 	 }
            		    	gadget.savePref("typs",typeValues);
            		    });		
            		    var typeValue1 = AJS.$('#typeSelect').val();
             	  		 	 if(typeValue1 == "External"){
             	  		 	 AJS.$("#solutionSpan").show();
             	  				AJS.$("#solutionSelect").show();
             	  		 	 	AJS.$("#locationSpan").hide();
             	  				AJS.$("#locationSelect").hide();
             	  				
             	  		 	 }
             	  		 	 else{
             	  		 	 	AJS.$("#locationSpan").show();
             	  				AJS.$("#locationSelect").show();
             	  		 	 	AJS.$("#solutionSpan").hide();
             	  				AJS.$("#solutionSelect").hide();
             	  				 
             	  		 	 }
            		     AJS.$(args.solutionGroups).each(function(){
             	  				 	 var solutionOption = AJS.$("<option/>").attr("value", this.value).text(this.value);						
						
									AJS.$("#solutionSelect").append(solutionOption);
						
									var projectUserPrefTypeValue = gadget.getPref("solutionGroup");
			           				var pType = projectUserPrefTypeValue.split("|");
										if(AJS.$.inArray(this.value,pType)>-1)
										{
											solutionOption.attr({selected: "selected"});
						    			} 
             	  				 	});
             	  				 	
            		    AJS.$(args.typeValues).each(function(){
             	  				 	 var locationOption = AJS.$("<option/>").attr("value", this.value).text(this.value);						
						
									AJS.$("#locationSelect").append(locationOption);
						
									var projectUserPrefTypeValue = gadget.getPref("location");
			           				var pType = projectUserPrefTypeValue.split("|");
										if(AJS.$.inArray(this.value,pType)>-1)
										{
											locationOption.attr({selected: "selected"});
						    			} 
             	  				 	});			
             	  		AJS.$("#locationSelect").change(function(event)
            		    {
            		    	var locationValues = AJS.$("#locationSelect").val();	
            		    	
            		    	gadget.savePref("location",locationValues);
            		    });		
            		    AJS.$("#solutionSelect").change(function(event)
            		    {
            		    	var solutionValues = AJS.$("#solutionSelect").val();	
            		    	
            		    	gadget.savePref("solutionGroup",solutionValues);
            		    });													
						desc.fields.push ({
							id: "start-date-picker",
							userpref: "startDate",
							label: "Start Date",
							type: "date",
							value: gadget.getPref("startDate")							
							}
						);
						desc.fields.push ({						
							id: "end-date-picker",
							userpref: "endDate",
							label: "End Date",
							type: "date",
							value: gadget.getPref("endDate")		
							}
						);						
						desc.fields.push ({
							id: "severity",
							userpref: "severity",
							label: "Severity",
							type: "multiselect",
							selected: gadget.getPref("severity"),
							options:[
								{  
									label:"Critical",
									value:"Critical"
								},
								{  
									label:"High",
									value:"High"
								},
								{  
									label:"Medium",
									value:"Medium"
								},
								{  
									label:"Low",
									value:"Low"
								},
								{  
									label:"None",
									value:"None"
								}								
							] 		
							}
						);
						desc.fields.push (DTGADGET.ITSMstatusPicker_incident(gadget, "ITIM","null","status"));
						return desc;
                    },

                   args: DTGADGET.descriptorArgsSummary("__ATLASSIAN_BASE_URL__")
                    
                },
				view: { 
				/* (2) Define the view logic */
					onResizeAdjustHeight: true,
                    enableReload: true,
                    template: function (args){
						
						var gadget = this;
						var gadgetHeader = gadget.getPref("headertxt");
						console.log("gadgetHeader"+gadgetHeader)
						
						if(gadgetHeader!= "" && gadgetHeader!=null){
							gadgets.window.setTitle(gadgetHeader);
						}else{
							gadgets.window.setTitle("Incident Management : Incident Duration");
						}
						
                    	AJS.$('#typeSelect').hide();
                     				AJS.$('#typeSpan').hide();
                    			AJS.$("#locationSpan").hide();
             	  				AJS.$("#locationSelect").hide();
             	  		 	 	AJS.$("#solutionSpan").hide();
             	  				AJS.$("#solutionSelect").hide();
						drawchart(args.incidentData);
					},
					args: [{
								key: "incidentData",
								ajaxOptions: function() {
								  AJS.$('#typeSelect').hide();
                     				AJS.$('#typeSpan').hide();
                    			AJS.$("#locationSpan").hide();
             	  				AJS.$("#locationSelect").hide();
             	  		 	 	AJS.$("#solutionSpan").hide();
             	  				AJS.$("#solutionSelect").hide();
									return {										
										url: "/rest/incident/1.0/incidentexecsummary.json",
										contentType: "application/json",
										data:  { 
											solutionGroup : gadgets.util.unescapeString(this.getPref("solutionGroup")),
											severity : gadgets.util.unescapeString(this.getPref("severity")),
											startDate : gadgets.util.unescapeString(this.getPref("startDate")),
											endDate : gadgets.util.unescapeString(this.getPref("endDate")),
											status : gadgets.util.unescapeString(this.getPref("status")),
											reporttype : "IncidentDuration",
											location : gadgets.util.unescapeString(this.getPref("location")),
											typs :  gadgets.util.unescapeString(this.getPref("typs")),
											cause :  gadgets.util.unescapeString(this.getPref("cause"))											
										}
									};
								}
							}]				
				}
			});
		})();
		drawchart=function(_restdata) {
			 var monthslables = new Array();
			if (_restdata.length > 0) {					
				  var months = _restdata[0].monthly;
					for (var _i=0, _len=months.length; _i<_len; _i++){						
						monthslables.push(months[_i].month);
					}
			}
			
			
			var _ymax = 0;
			var sg = new Array();	
			var sgLabels = new Array();
			//Create dynamically array obj for all solution groups
			if (_restdata.length > 0) {							
				for(var i=1;i<_restdata.length;i++){
				  if(_restdata[i].solutionGroup=='Total'   || _restdata[i].solutionGroup=='3 Month Average' ){
					
					} else {
					 var arr = new Array();
						var months = _restdata[i].monthly;
						for (var _i=0, _len=months.length; _i<_len; _i++){								
								var incidentcount = months[_i].incidentcount;
								incidentcount = incidentcount.replace(',','');
								var _sg_data = { y: parseInt(incidentcount), url: months[_i].drillDown};								
								arr.push(_sg_data);
						}						
						sgLabels.push(_restdata[i].solutionGroup);
						sg.push(arr);
					}
				}
			}
			_ymax=_ymax+10;
			
			if (_restdata.length < 1) {
				 var arr = new Array();
				sg.push(arr);				
			}
			
			 var ticks = monthslables;
			 var dataArr = new Array();
			
			for(var j=0;j<sgLabels.length;j++){			
				var dataset = { name: 	sgLabels[j], data: sg[j] };
				dataArr.push(dataset);
			}
			
			
			
	var options = {
	            chart: {
	                renderTo: 'DurationBarChartView',
	                type: 'column',					
					//options3d: {
					//	enabled: true,
					//	alpha: 5,
					//	beta: 20,
					//	viewDistance: 25,
					//	depth: 300
					//},
					marginTop: 40,
					marginRight: 40
	            },
	            title: {
	                text: ' ',
	                x: -20 //center
	            },
				credits: {
					enabled: false
				},
				colors: ['#F7A35C', '#8085E9','#F15C80', '#E4D354','#8D4653', '#91E8E1','#E5F497', '#00AF52','#A9BCF5','#2E9AFE','#F5A9E1','#2EFEF7','#58FA82','#F5BCA9','#F3E2A9','#2ECCFA','#F4FA58','#DBA901','#FE642E'],
	            xAxis: {
	                categories: monthslables,
					title: {
						//text: 'Months'
					}
	            },
	            yAxis: {
				    min: 0,
	                title: {
	                    text: 'Incident Minutes'
	                }
	            },
	            tooltip: {
					//pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',
					formatter: function() {
						return '<b>'+ this.series.name+'</b><br/>'+
								this.point.y + '<br/>' +
								'('+Highcharts.numberFormat(this.percentage, 0) + '%)<br/>';
					}
					//shared: true
				},
	             plotOptions: {
	                column: {
	                    stacking: 'normal',
	                    dataLabels: {
	                        enabled: false,
	                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'black',
							formatter: function() {
								if (this.y != 0) {
								console.log('y value'+this.y);
								  return this.y +'';
								} else {
								  return null;
								}
							}
	                    }
	                    
	                },
					series: {
						cursor: 'pointer',
						point: {
							events: {
								click: function () {
									top.location.href = this.options.url;
								}
							}
						}
					}
	            },
	            series: dataArr
	        }
	     
	      var chart = new Highcharts.Chart(options);
		
	};
	
	
	</script>		
		<div id="DurationBarChartView"> </div>
  ]]>
  </Content></Module>