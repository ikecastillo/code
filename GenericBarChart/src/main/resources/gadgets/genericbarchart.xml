<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <ModulePrefs title="Generic Bar Chart"
                 directory_title="Generic Bar Chart"
                 description="Displays the matching issues for a filter as a bar chart.
                 Allows configuring x and y axes based on the fields available in the system."
                 author="DT"
                 thumbnail="http://goo.gl/LDofI">
        <Require feature="dynamic-height"/>
        <Require feature="oauthpopup"/>
        <Require feature="setprefs"/>
        <Require feature="settitle"/>
        <Require feature="views"/>
        <Optional feature="atlassian.util"/>
        <Optional feature="gadget-directory">
            <Param name="categories">JIRA</Param>
        </Optional>
        #oauth
		#supportedLocales("gadget.common,gadget.filter.results,gadget.issuetable.common")
        #supportLocales
    </ModulePrefs>
    <UserPref name="show_date" display_name="Show Dates?" datatype="bool" default_value="true"/>

    <UserPref name="refresh" datatype="hidden" default_value="false" />
    <UserPref name="isConfigured" datatype="hidden" default_value="false"/>
    <UserPref name="firstTime" datatype="hidden" default_value="true"/>
	<UserPref name="headertxt" datatype="hidden" default_value="Generic Bar Chart"/>
	<UserPref name="filterId" datatype="hidden" default_value=""/>
	<!--<UserPref name="reporttype" datatype="hidden" default_value="Incident Duration" />-->
	<UserPref name="xaxis" datatype="hidden" default_value=""/>
	<UserPref name="xaxislabel" datatype="hidden" default_value=""/>
	<UserPref name="yaxis" datatype="hidden" default_value=""/>
	<UserPref name="yaxislabel" datatype="hidden" default_value=""/>
	<!-- <UserPref name="groupby" datatype="hidden" default_value=""/> -->
	<!-- <UserPref name="counton" datatype="hidden" default_value=""/> -->
	<UserPref name="legenddepth" datatype="hidden" default_value="Does Not Apply"/>
	 <UserPref name="customFields" datatype="hidden" default_value="--Default--" />
	<UserPref name="sigmavalues" datatype="hidden" default_value="Sum" />

	<Content type="html">
     <![CDATA[
		#requireResource("com.atlassian.jira.gadgets:common")
		#requireResource("com.dt.jira.plugin.genericbarchart.GenericBarChart:GenericBarChart-resources")
		#requireResource("com.dt.jira.plugin.genericbarchart.GenericBarChart:itsmjqplot")
		#requireContext("com.atlassian.jira.gadgets:autocomplete")
		#includeResources()
		<script type="text/javascript">
			GROUP_BY_FIELD = "Defect Cause";
			var viewGadget = "";
			(function () {
				/* (1) Construct and initialise the gadget */
				var gadget = AJS.Gadget({
					baseUrl: "__ATLASSIAN_BASE_URL__", /* (3) Used to make base url available to gadget */
					useOauth: "/rest/gadget/1.0/currentUser",
					config: {
						descriptor: function(args)
						{
							var gadget = this;
							/* For XAxis dropdown in gadget edit */
							var getCustomFieldsXAxis=function(){
								var options=[];
								for (var index in args.customFields) {
									options.push({label:args.customFields[index].label,value:args.customFields[index].value});
								}
								return {
									id: "xaxis",
									userpref: "xaxis",
									label: "X-Axis",
									type: "select",
									selected: gadget.getPref("xaxis"),
									options: options,
									description: "What field do you want on the X Axis?"
								};
							};

							/* For YAxis dropdown in gadget edit */
							var getCustomFieldsYAxis=function(){
								var options=[];
								for (var index in args.customFields) {
									options.push({label:args.customFields[index].label,value:args.customFields[index].value});
								}
								return {
									id: "yaxis",
									userpref: "yaxis",
									label: "Y-Axis",
									type: "select",
									selected: gadget.getPref("yaxis"),
									options: options,
									description: "What field do you want on the Y Axis?"
								};
							};

							/* For the field Legend on gadget edit*/
							var getCustomFields=function(){

								var options=[];
								for (var index in args.customFields) {
									options.push({label:args.customFields[index].label,value:args.customFields[index].value});
								}
								return {
									id: "customFields",
									userpref: "customFields",
									label: "Legend",
									type: "select",
									selected: gadget.getPref("customFields"),
									options: options,
									description: "On what field (legend) do you want the columns in the chart to be based on?"
								};
							};

							return {
								fields: [
									{
										userpref: "headertxt",
										label: "Header",
										type: "text",
										value: gadget.getPref("headertxt"),
										description: "What do you want this chart to be named as?"
									},
									AJS.gadget.fields.filterPicker(gadget, "filterId"),
									getCustomFieldsXAxis(),
									{
										userpref: "xaxislabel",
										label: "X-Axis Label",
										type: "text",
										value: gadget.getPref("xaxislabel"),
										description: "What do you want the X Axis to be labeled as?"
									},
									getCustomFieldsYAxis(),
									{
										userpref: "yaxislabel",
										label: "Y-Axis Label",
										type: "text",
										value: gadget.getPref("yaxislabel"),
										description: "What do you want the Y Axis to be labeled as?"
									},
									getCustomFields(),
									{
										id: "legenddepth",
										userpref: "legenddepth",
										label: "Legend Depth",
										type: "select",
										selected: gadget.getPref("legenddepth"),
										options:[
											{
												label:"Does Not Apply",
												value:"Does Not Apply"
											},
											{
												label:"1",
												value:"1"
											},
											{
												label:"2",
												value:"2"
											},
											{
												label:"3",
												value:"3"
											},
											{
												label:"4",
												value:"4"
											}
										],
										description: "What would be the depth of the legend? This does not apply for most fields unless its " +
										"a cascading field."
									},
									{
										id: "sigmavalues",
										userpref: "sigmavalues",
										label: "&Sigma; Values",
										type: "select",
										selected: gadget.getPref("sigmavalues"),
										options:[
											{
												label:"Sum",
												value:"Sum"
											},
											{
												label:"Count",
												value:"Count"
											}
										],
										description: "Do you want to add up or count the legend values?"
									},
									AJS.gadget.fields.nowConfigured()
								]
							}
						},
						
						args: [
							{
								key: "customFields",
								ajaxOptions: function() {
									reportType = gadgets.util.unescapeString(this.getPref("reporttype"));
									AJS.log("Report Type for AJAX call is " + reportType);
									return {
										url: "/rest/incident/1.0/enhancedincidentexecsummary/getCustomFields.json",
										contentType: "application/json",
										data:  {
											reporttype : "IncidentCount"
										}
									};
								}
							}
                    ]
					},
					view: {
						/* (2) Define the view logic */
						onResizeAdjustHeight: true,
						enableReload: true,
						template: function (args){
							var gadget = this;
							// reset view
							gadget.getView().empty();
							gadget.getView().addClass("g-two-d-stats");

							var gadgetHeader = gadget.getPref("headertxt");
							console.log("gadgetHeader"+gadgetHeader);
							if(gadgetHeader!= "" && gadgetHeader!=null){
								gadgets.window.setTitle(gadgetHeader);
							}else{
								gadgets.window.setTitle("Generic Bar Chart");
							}
							console.log("args.getfiltername.filterName"+args.getfiltername.filterName);

							gadget.projectOrFilterName = args.getfiltername.filterName;

							console.log("gadget.projectOrFilterName"+gadget.projectOrFilterName);
							drawchart(gadget,args.incidentData);
						},
						args: [{
							key: "incidentData",
							ajaxOptions: function() {
								return {
									url: "/rest/incident/1.0/enhancedincidentexecsummary.json",
									contentType: "application/json",
									data:  {
										searchFilter : gadgets.util.unescapeString(this.getPref("filterId")),
										groupBy: gadgets.util.unescapeString(this.getPref("customFields")),
										legenddepth: gadgets.util.unescapeString(this.getPref("legenddepth")),
										sigmavalues: gadgets.util.unescapeString(this.getPref("sigmavalues")),
										xaxis: gadgets.util.unescapeString(this.getPref("xaxis")),
										yaxis: gadgets.util.unescapeString(this.getPref("yaxis"))
									}
								};
							}
						},
						{
								key: "getfiltername",
								ajaxOptions: function ()
								{
									var gadget = this;
									return {
										url: "/rest/incident/1.0/enhancedincidentexecsummary/getFilterName.json",
										contentType: "application/json",
										data:  {
											filterId : gadgets.util.unescapeString(this.getPref("filterId"))
										}
									};
								}
						}
					 ]
					}
				});
			})();
			drawchart=function(gadget,_restdata) {
				var monthslables = new Array();
				if (_restdata.length > 0) {
					var months = _restdata[0].graphCoordinates;
					for (var _i=0, _len=months.length; _i<_len; _i++){
						monthslables.push(months[_i].xAxis);
					}
				}
				console.log('Labels: '+monthslables);
				var _ymax = 0;
				var sg = new Array();
				var sgLabels = new Array();
				//Create dynamically array obj for all solution groups
				if (_restdata.length > 0) {
					for(var i=1;i<_restdata.length;i++){
						if(_restdata[i].legend=='Total'   || _restdata[i].legend=='3 Month Average' ){
						} else {
							var arr = new Array();
							var months = _restdata[i].graphCoordinates;
							for (var _i=0, _len=months.length; _i<_len; _i++){
								var incidentcount = months[_i].countOrSum;
								incidentcount = incidentcount.replace(',','');
								var _sg_data = { y: parseInt(incidentcount), url: months[_i].drillDown};
								arr.push(_sg_data);
							}
							sgLabels.push(_restdata[i].legend);
							sg.push(arr);
						}
					}
				}
				_ymax=_ymax+10;
				console.log('solution groups Labels: '+sgLabels);
				console.log('_ymax: '+_ymax);
				if (_restdata.length < 1) {
					var arr = new Array();
					sg.push(arr);
				}
				console.log('solution group: '+sg);
				var ticks = monthslables;
				var dataArr = new Array();
				for(var j=0;j<sgLabels.length;j++){
					var dataset = { name: 	sgLabels[j], data: sg[j] };
					dataArr.push(dataset);
				}
				AJS.log("customFields in the chart is " + gadget.getPref("customFields"));
				AJS.log("sigmavalues in the chart is " + gadget.getPref("sigmavalues"));
				AJS.log("xAxis in the chart is " + gadget.getPref("xaxis"));
				AJS.log("yAxis in the chart is " + gadget.getPref("yaxis"));
				//var yAxisName = ReportTypeGenerator.generateYAxisColumnName(reportType);
				var yAxisLabel = gadget.getPref("yaxislabel");
				var xAxisLabel = gadget.getPref("xaxislabel");
				AJS.$('#GenericBarChartView').highcharts({
					chart: {
						type: 'column',
						//options3d: {
						//	enabled: true,
						//	alpha: 5,
						//	beta: 20,
						//	viewDistance: 25,
						//	depth: 300
						//},
						marginTop: 40,
						marginRight: 40
					},
					title: {
						text: ' '
					},
					credits: {
						enabled: false
					},
					colors: ['#F7A35C', '#8085E9','#F15C80', '#E4D354','#8D4653', '#91E8E1','#E5F497', '#00AF52','#A9BCF5','#2E9AFE','#F5A9E1','#2EFEF7','#58FA82','#F5BCA9','#F3E2A9','#2ECCFA','#F4FA58','#DBA901','#FE642E'],
					xAxis: {
						categories: ticks,
						title: {
							text: xAxisLabel
						}
					},
					yAxis: {
						min: 0,
						title: {
							text: yAxisLabel
						}
					},
					tooltip: {
						//pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',
						formatter: function() {
							return '<b>'+ this.series.name+'</b><br/>'+
									this.point.y + '<br/>' +
									'('+Highcharts.numberFormat(this.percentage, 0) + '%)<br/>';
						}
						//shared: true
					},
					plotOptions: {
						column: {
							stacking: 'normal',
							dataLabels: {
								enabled: false,
								color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'black',
								style: {
									//textShadow: '0 0 3px black'
								},
								formatter: function() {
									if (this.y != 0) {
										return this.y +'';
									} else {
										return null;
									}
								}
							}
						},
						series: {
							cursor: 'pointer',
							point: {
								events: {
									click: function () {
										top.location.href = this.options.url;
									}
								}
							}
						}
					},
					series: dataArr
				});
			};
		</script>
		<div id="GenericBarChartView"> </div>
		]]>
  </Content>
</Module>