<?xml version="1.0" encoding="UTF-8"?>

<atlassian-plugin key="${project.groupId}.${project.artifactId}" name="${project.name}" plugins-version="2">
  <plugin-info>
    <description>${project.description}</description>
    <version>${project.version}</version>
    <vendor name="${project.organization.name}" url="${project.organization.url}"/>
    <param name="plugin-icon">images/pluginIcon.png</param>
    <param name="plugin-logo">images/pluginLogo.png</param>
	<param name="configure.url">/plugins/servlet/xmatters/admin</param>
  </plugin-info>
  <!-- add our i18n resource -->
  <resource type="i18n" name="i18n" location="xMatters-integration-plugin"/>
  <!-- add our web resources -->
  <web-resource key="xMatters-integration-plugin-resources" name="xMatters-integration-plugin Web Resources">
    <dependency>com.atlassian.auiplugin:ajs</dependency>
	<dependency>com.atlassian.auiplugin:aui-messages</dependency>
    <resource type="download" name="xMatters-integration-plugin.css" location="/css/xMatters-integration-plugin.css"/>
    <resource type="download" name="xMatters-integration-plugin.js" location="/js/xMatters-integration-plugin.js"/>
    <resource type="download" name="images/" location="/images"/>
	<resource type="download" name="admin.js" location="/js/admin.js"/> 
    <context>xMatters-integration-plugin</context>
	
  </web-resource>
  <!-- for plugin config button -->
  <component-import key="templateRenderer" interface="com.atlassian.templaterenderer.TemplateRenderer"/>
  <servlet key="admin-servlet" class="com.dt.jira.xmatters.intgt.plugin.adminui.AdminServlet"> <url-pattern>/xmatters/admin</url-pattern></servlet>
  <component-import key="userManager" interface="com.atlassian.sal.api.user.UserManager" />
  <component-import key="pluginSettingsFactory" interface="com.atlassian.sal.api.pluginsettings.PluginSettingsFactory" />
  <component-import key="transactionTemplate" interface="com.atlassian.sal.api.transaction.TransactionTemplate" />
   <!-- end plugin config button -->
  <!-- publish our component -->
  <component key="myPluginComponent" class="com.dt.jira.xmatters.intgt.plugin.MyPluginComponentImpl" public="true">
    <interface>com.dt.jira.xmatters.intgt.plugin.MyPluginComponent</interface>
  </component>
  <!-- import from the product container -->
  <component-import key="applicationProperties" interface="com.atlassian.sal.api.ApplicationProperties"/>
  <web-section key="xMatters-manage-top" name="xMatters Section" location="view.issue.opsbar" weight="50"/>
  <web-section key="xMatters-manage-plan-top" name="xMatters Section" location="xMatters-manage-top" weight="50"/>
  <servlet key="callback-servlet" class="com.dt.jira.xmatters.intgt.plugin.webwork.CallbackServlet"> <url-pattern>/xmatterscallback</url-pattern></servlet>		
	
  <web-item key="XMatters" i18n-name-key="XMatters.name" name="XMatters" section="xMatters-manage-plan-top" weight="30">
    <label key="add.XMatters"/>
    <styleClass>issueaction-xMatters-issue</styleClass>
    <link linkId="add-XMatters">/secure/XMattersWebWork!default.jspa?id=${issueId}</link>
    <conditions type="AND">
      <condition class="com.atlassian.jira.plugin.webfragment.conditions.IsIssueEditableCondition"/>
      <condition class="com.atlassian.jira.plugin.webfragment.conditions.HasIssuePermissionCondition">
        <param name="permission" value="edit"/>
      </condition>
      <condition class="com.atlassian.jira.plugin.webfragment.conditions.HasProjectPermissionCondition">
        <param name="permission">create</param>
      </condition>
      <condition class="com.dt.jira.xmatters.intgt.plugin.condition.IssueTypeCondition"/>
    </conditions>
  </web-item>
  <webwork1 key="XMattersWebWork" name="XMattersWebWork" i18n-name-key="x-matters-web-work.name">
    <description key="x-matters-web-work.description">The XMattersWebWork Plugin</description>
    <actions>
      <action name="com.dt.jira.xmatters.intgt.plugin.webwork.XMattersWebWork" alias="XMattersWebWork">
        <view name="input">/templates/success.vm</view>
        <view name="error">/templates/success.vm</view>
      </action>
    </actions>
  </webwork1>
  <web-resource name="xMatters Web Resource" i18n-name-key="xMatters-web-resource.name" key="xMatters-web-resource">
    <description key="xMatters-web-resource.description">The xMatters Web Resource Plugin</description>
    <context>jira.general</context>
    <transformation extension="js">
      <transformer key="jsI18n"/>
    </transformation>
    <resource type="download" name="xMatters.js" location="js/xMatters.js">
      <property key="content-type" value="text/javascript"/>
    </resource>
  </web-resource>
  <rest name="x Matter Rest API" i18n-name-key="x-matter-rest-api.name" key="x-matter-rest-api" path="/xmatter-integration" version="1.0">
    <description key="x-matter-rest-api.description">The xMatter Rest API Plugin</description>
  </rest>
  <!-- configuration for custom field-->
   <customfield-type key="xmatter-log" name="Textfield for xMatters Log" class="com.dt.jira.xmatters.intgt.plugin.customfield.TableCustomField">
  		<description>A text field renders as Table for xMatters Log(not editable) </description> 
  		<resource type="velocity" name="edit" location="templates/edit.vm" /> 
  		<resource type="velocity" name="view" location="templates/view.vm" /> 
 		<resource type="velocity" name="xml" location="templates/plugins/fields/xml/xml-basictext.vm" /> 
    </customfield-type>
	<!-- configuration for scheduler for sync up from jira to xMatters 
	<component-import key="xMatterspluginscheduler">
		<description>SAL Scheduler</description>
		<interface>com.atlassian.sal.api.scheduling.PluginScheduler</interface>
	</component-import>
	 <component key="xMattersschedulerComponent" class="com.dt.jira.xmatters.intgt.plugin.scheduler.xMattersJobImpl"
             system="true" public="true">
        <description>The plugin component that schedules the job.</description>
        <interface>com.atlassian.sal.api.lifecycle.LifecycleAware</interface>
        <interface>com.dt.jira.xmatters.intgt.plugin.scheduler.xMattersJob</interface>
    </component>
	-->
</atlassian-plugin>
