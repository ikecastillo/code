<?xml version="1.0" encoding="UTF-8" ?><Module><ModulePrefs title="Project Burndown - Optimistic/Pessimistic" directory_title="Project Burndown (Optimistic/Pessimitic) Chart" description="Burndown of Story points of a given Project" author="Ness" thumbnail="http://goo.gl/LDofI"><Require feature="dynamic-height"/><Require feature="oauthpopup"/><Require feature="setprefs"/><Require feature="settitle"/><Require feature="views"/><Optional feature="atlassian.util"/><Optional feature="gadget-directory"><Param name="categories">Charts</Param></Optional>
        #oauth
        #supportedLocales("gadget.common,gadget.days.left")
        #supportLocales
    </ModulePrefs><UserPref name="refresh" datatype="hidden" default_value="false"/><UserPref name="isConfigured" datatype="hidden" default_value="false"/><UserPref name="firstTime" datatype="hidden" default_value="true"/><UserPref name="projectId" datatype="hidden"/><UserPref name="version" datatype="hidden" default_value="auto"/><Content type="html">
    <![CDATA[
	#requireResource("com.atlassian.jira.gadgets:common")
	#requireResource("com.dt.jira.plugins.DealertrackAgilePlugins:jqplot")

	#includeResources()
	<style type="text/css">
		.jqplot-point-label { 
			margin:10px;
			-webkit-transform:  rotate(-30deg);
			-moz-transform: rotate(-30deg);
			-o-transform:  rotate(-30deg);
		}
		table.jqplot-table-legend { border: none; }
		div.jqplot-table-legend-swatch-outline { border: none; }	
	</style>
	<style type="text/css">
		#container {
			padding: 15px;
		}

		#no-versions-warning {
			line-height: 1.4;
			font-size: 12px;
		}

		#days-box {
			text-align: center;
		}

		#days-value {
			text-align: center;
			font-size: 5em;
		}

		#days-text {
			padding-bottom: 15px;
		}

		#version-link {
			text-align: center;
		}

		#no-future-versions-warning {
			padding: 15px;
		}

		.view {
			padding: 0.5em 1em;
		}

		.overdue {
			color: #cc0000;
		}

		.future-release {
			color: #00cc00;
		}

		.today {
			color: #cc0000;
		}

		#days-text .today {
			font-weight: bold;
		}

		.icon {
			padding-top: 3px;
			padding-right: 3px;
		}

		.disabled {
			color: #C0C0C0;
		}
	</style>
	<script language="javascript" type="text/javascript">

		//console.log(getFieldid('Story Points'), Fields('http://localhost:2990/jira/rest/api/2/field'));
	console.log(getFields('/rest/api/2/field'));
	var targetPlot, controllerPlot;

	
	var getAllIssues = function(prjId, startAt){
		var resp, allIssues;
		do {
			var startAtParam = 'startAt=' + startAt;
			//var urlStr = '/rest/api/2/search?jql=issuetype in (Story,"Technical Story") and project=' + prjId;
			var urlStr = '/rest/api/2/search?jql=issuetype=Story and project=' + prjId; 
			urlStr += '&expand=changelog&fields=id,customfield_10006,customfield_10003,status';
			urlStr += '&' + startAtParam;
			console.log(prjId + '---' + startAt + '---' +urlStr);
			resp = AJS.$.ajax({
				type: "GET",
				url: urlStr,
				contentType: "application/json",
				async: false
				}).responseText;
				issueObj = JSON.parse(resp);
			hasIssues = issueObj.issues.length > 0;
			if(hasIssues) {
				if (allIssues==null) allIssues = issueObj;			 
				else Array.prototype.push.apply(allIssues.issues, issueObj.issues); //allIssues.issues.concat(issueObj.issues);
				startAt+=issueObj.maxResults;
			}
		} while(hasIssues);
		return allIssues;
	}
	var getbacklogSP = function(allIssues) {
		for (var _i=0, _len=allIssues.issues.length, backlog=0; _i<_len; _i++){
			issue = allIssues.issues[_i];
			backlog+=getSP(issue);
		}
		return backlog;
	}

	var drawChart = function(prjId) {
		var allIssuesObj = getAllIssues(prjId, 0);
		var burndownSP = getbacklogSP(allIssuesObj);
		var chartData = getChartObj(allIssuesObj);
		console.log(allIssuesObj);
		console.log(chartData);
		AJS.$.jqplot.config.enablePlugins = true;
		
		var ticks = [''];
		var SP = [['',burndownSP]];
		var optimistic = [['',null]];
		var pessimistic = [['',null]];
		var planned = [['',null]];
		var prev_dt = '01/01/1900';
		for (var _i=0, _len1=chartData.length; _i<_len1; _i++) {
			burndownSP = burndownSP - chartData[_i]['completed'];
			//ticks.push(chartData[_i]['name']);
			var end_dt = dateFormat(new Date(chartData[_i]['enddate']),'mm/dd/yyyy HH:MM');
//			if(dateDiff(new Date(prev_dt),new Date(end_dt)) < 31 && (_i!=_len1-1)) continue; 
//			else prev_dt = end_dt;
			//var end_dt = chartData[_i]['enddate'];
			ticks.push(end_dt);
			SP.push([end_dt, burndownSP]);
			optimistic.push([end_dt,(_i==_len1-1)?burndownSP:null]);
			pessimistic.push([end_dt,(_i==_len1-1)?burndownSP:null]);
			planned.push([end_dt,(_i==_len1-1)?burndownSP:null]);
		};
		var zerotick = new Date(SP[1][0]);
		zerotick.setDate(zerotick.getDate()-1);
		console.log(SP);
		var zt = dateFormat(zerotick, 'mm/dd/yyyy HH:MM');
		SP[0][0] = zt; optimistic[0][0] = zt; pessimistic[0][0] = zt; planned[0][0] = zt;
		//ticks[0] = zerotick;
		var team = 4, velperwk = 12, numOfwks = 4;
		var capacity=velperwk*numOfwks*team;
		var optimisticpercent=1.4, pessimisticpercent=0.8;
		var optimisticBurndown = burndownSP, pessimisticBurndown = burndownSP, plannedBurndown=burndownSP;
		var optimisticburndownrate = capacity*optimisticpercent;
		var pessimisticburndownrate = capacity*pessimisticpercent;
		var plannedburndownrate = capacity;
		var dt = new Date(end_dt);
		while(1) {		
			optimisticBurndown = optimisticBurndown -  optimisticburndownrate;
			pessimisticBurndown = pessimisticBurndown -  pessimisticburndownrate;
			plannedBurndown = plannedBurndown -  plannedburndownrate;
			dt.setDate(dt.getDate()+numOfwks*7);
			ticks.push(dateFormat(dt,'mm/dd/yyyy HH:MM'));
			//ticks.push(dt);
	/*
			optimistic.push((optimisticBurndown<0)?0:optimisticBurndown);
			pessimistic.push((pessimisticBurndown<0)?null:pessimisticBurndown);
			planned.push((plannedBurndown<0)?null:plannedBurndown);
	*/
			optimistic.push([dateFormat(dt,'mm/dd/yyyy HH:MM'),optimisticBurndown]);
			pessimistic.push([dateFormat(dt,'mm/dd/yyyy HH:MM'),pessimisticBurndown]);
			planned.push([dateFormat(dt,'mm/dd/yyyy HH:MM'),plannedBurndown]);

			if (optimisticBurndown < 0 && pessimisticBurndown < 0 && plannedBurndown < 0) break;
		};
		console.log(optimistic); console.log(pessimistic); console.log(SP);console.log(planned);
		//var committed = [10, 22, 64, 75, 100, 10];
		//var completed = [15, 20, 50, 40, 80, 5];
		// Can specify a custom tick Array.
		// Ticks should match up one for each y value (category) in the series.
		//var ticks = ['Sprint1', 'Sprint 2', 'Sprint 3', 'Sprint 4', 'Sprint 5', 'Sprint 6'];
		targetPlot = AJS.$.jqplot('chart_div', [SP,optimistic, pessimistic, planned], {
			// The "seriesDefaults" option is an options object that will
			// be applied to all series in the chart.
			seriesDefaults:{
				lineWidth:1.2,
				pointLabels: {show: true, edgeTolerance: 5, xpadding:3, ypadding:3},
				trendline: {show: false, color: 'darkgray'},
				markerRenderer: AJS.$.jqplot.MarkerRenderer, 
				markerOptions: {
					size: 5
				},
				
			},
			grid:{drawGridLines: false,background: 'white'},
			// Custom labels for the series are specified with the "label"
			// option on the series option.  Here a series option object
			// is specified for each series.
			series:[
				{label:'Burndown', trendline: {show: true, color: 'darkgray', lineWidth:0.75 }},
				{label:'Optimistic'},	
				{label:'Pessimistic'},
				{label:'Planned'}			
			],
			// Show the legend and put it outside the grid, but inside the
			// plot container, shrinking the grid to accomodate the legend.
			// A value of "outside" would not shrink the grid and allow
			// the legend to overflow the container.
			legend: {
			  show: true,
			  location: 'e'
			} ,
			axesDefaults:{
				tickOptions: {
					showGridline: false,
					fontSize: '12pt'
				}
			},
			axes: {
				// Use a category axis on the x axis and use our custom ticks.
				xaxis: {
					renderer: AJS.$.jqplot.DateAxisRenderer,
					//tickInterval: '2 months',
					tickRenderer: AJS.$.jqplot.CanvasAxisTickRenderer,
					tickOptions: {
						formatString:'%d/%b/%Y',
						angle: -30, 
						fontSize: '11pt'
					}					
				},
				yaxis: {
					min:0,
					pad: 0,
					tickOptions: {formatString: '%d'}
				}
			},
			cursor:{ 
				show: true,
				zoom:true, 
				showTooltip:false
			},
			seriesColors: ['blue', 'green', 'red', 'black']
		});
		
		controllerPlot = AJS.$.jqplot('chart2', [SP,optimistic, pessimistic, planned], {
			// The "seriesDefaults" option is an options object that will
			// be applied to all series in the chart.
			seriesDefaults:{
				lineWidth:1.2,
				pointLabels: {show: false, edgeTolerance: 5, xpadding:3, ypadding:3},
				trendline: {show: false, color: 'darkgray'},
				markerRenderer: AJS.$.jqplot.MarkerRenderer, 
				markerOptions: {
					size: 5
				},				
			},
			grid:{drawGridLines: false,background: 'white'},
			// Custom labels for the series are specified with the "label"
			// option on the series option.  Here a series option object
			// is specified for each series.
			series:[
				{label:'Burndown', trendline: {show: true, color: 'darkgray', lineWidth:0.75 }},
				{label:'Optimistic'},	
				{label:'Pessimistic'},
				{label:'Planned'}			
			],
			axesDefaults:{
				tickOptions: {
					showGridline: false,
					fontSize: '12pt'
				}
			},
			axes: {
				// Use a category axis on the x axis and use our custom ticks.
				xaxis: {
					renderer: AJS.$.jqplot.DateAxisRenderer,
					tickRenderer: AJS.$.jqplot.CanvasAxisTickRenderer,
					tickOptions: {
						show: false,
						formatString:'%d/%b/%Y',
						angle: -30, 
						fontSize: '10pt'
					}					
				},
				yaxis: {
					min:0,
					pad: 0,
					tickOptions: {formatString: '%d'}
				}
			},
			cursor:{ 
				show: true,
				zoom:true, 
				showTooltip:false
			},
			seriesColors: ['blue', 'green', 'red', 'black']
		});
		
		
		//targetPlot.redraw();
		//targetPlot.replot( {resetAxes: false } );
		//gadgets.window.setTitle("Release Burndown Chart");	
		AJS.$.jqplot.Cursor.zoomProxy(targetPlot, controllerPlot);			 
		AJS.$.jqplot._noToImageButton = true;
	}
	</script>
	<script type="text/javascript">
	(function ()
	{
		var gadget = AJS.Gadget({
			baseUrl: "__ATLASSIAN_BASE_URL__",
			useOauth: "/rest/gadget/1.0/currentUser",
			config: {
				descriptor: function(args)
				{
					var gadget = this;
					gadgets.window.setTitle("__MSG_gadget.days.left.configTitle__");
					var projectPicker = AJS.gadget.fields.projectPicker(gadget, "projectId", args.projectOptions);

					return {

						theme : function()
						{
							if (gadgets.window.getViewportDimensions().width < 450)
							{
								return "gdt top-label";
							}
							else
							{
								return "gdt";
							}
						}(),
						fields: [
							projectPicker,
							AJS.gadget.fields.nowConfigured()
						]
					};
				},
				args: function()
				{
					return [
						{
							key: "projectOptions",
							ajaxOptions:  "/rest/gadget/1.0/filtersAndProjects?showFilters=false"

						}


					];
				}()
			},
			view: {
				onResizeAdjustHeight: true,
				enableReload: true,
				template: function (args)
				{
					var gadget = this;
					var baseUrl = AJS.$.ajaxSettings.baseUrl;
					var getContainer = function()
					{
						var container = AJS.$("<div/>").attr('id', 'container').appendTo(gadget.getView().empty());
						return function()
						{
							return container;
						}
					}();
					var container = getContainer().append('<div class="jqPlot" id="chart_div"/><p><div class="jqPlot" id="chart2" style="margin-top: 30px;height:100px;"></div>');
					console.log(getFieldid(getFields('/rest/api/2/field'),'Story Points'));
					drawChart(gadget.getPref('projectId').substring(8));
				},
			}
		});
	})();

	</script>
	
]]>
  </Content></Module>